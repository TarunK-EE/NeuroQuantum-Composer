/**
 * AudioSystem - Handles audio playback and effects using Tone.js
 */
class AudioSystem {
    constructor() {
        // Main audio components
        this.synths = {};
        this.effects = {};
        
        // Playback state
        this.isPlaying = false;
        this.currentPart = null;
        this.tempo = 120;
        
        // Initialize audio components
        this._initAudio();
    }
    
    async _initAudio() {
        // Initialize effects
        this.effects.reverb = new Tone.Reverb({
            decay: 2.5,
            wet: 0.3
        }).toDestination();
        
        this.effects.delay = new Tone.PingPongDelay({
            delayTime: "8n", 
            feedback: 0.3,
            wet: 0.2
        }).connect(this.effects.reverb);
        
        this.effects.filter = new Tone.Filter({
            frequency: 1000,
            type: "lowpass",
            rolloff: -24
        }).connect(this.effects.delay);
        
        // Initialize "quantum" modulation effects
        this.effects.qReverb = new Tone.Reverb({
            decay: 4,
            wet: 0.1
        }).toDestination();
        
        this.effects.qModulation = new Tone.Chorus({
            frequency: 0.5,
            delayTime: 2.5,
            depth: 0.7,
            wet: 0.5
        }).connect(this.effects.qReverb);
        
        // Master compression and limiting
        this.effects.limiter = new Tone.Limiter(-3).toDestination();
        this.effects.compressor = new Tone.Compressor({
            threshold: -15,
            ratio: 4,
            attack: 0.03,
            release: 0.25
        }).connect(this.effects.limiter);
        
        // Initialize synths
        await this._initSynths();
        
        console.log("Audio system initialized");
    }
    
    async _initSynths() {
        // Wait for Tone.js to be ready and load reverb impulses
        await Promise.all([
            Tone.start(),
            this.effects.reverb.generate(),
            this.effects.qReverb.generate()
        ]);
        
        // Bass/kick synth
        this.synths.kick = new Tone.MembraneSynth({
            pitchDecay: 0.05,
            octaves: 5,
            oscillator: { type: "sine" },
            envelope: {
                attack: 0.001,
                decay: 0.4,
                sustain: 0.01,
                release: 0.8
            }
        }).connect(this.effects.compressor);
        
        // Snare/clap synth
        this.synths.snare = new Tone.NoiseSynth({
            noise: { type: "white" },
            envelope: {
                attack: 0.001,
                decay: 0.2,
                sustain: 0.02,
                release: 0.6
            }
        }).connect(this.effects.filter);
        
        // Hi-hat synth
        this.synths.hihat = new Tone.MetalSynth({
            frequency: 200,
            envelope: {
                attack: 0.001,
                decay: 0.1,
                sustain: 0.01,
                release: 0.2
            },
            harmonicity: 5.1,
            modulationIndex: 32,
            resonance: 4000,
            octaves: 1.5
        }).connect(this.effects.filter);
        
        // Melodic synth
        this.synths.lead = new Tone.PolySynth(Tone.Synth, {
            oscillator: {
                type: "square4"
            },
            envelope: {
                attack: 0.01,
                decay: 0.3,
                sustain: 0.4,
                release: 0.8
            }
        }).connect(this.effects.qModulation);
        
        // Pad synth
        this.synths.pad = new Tone.PolySynth(Tone.Synth, {
            oscillator: {
                type: "sine"
            },
            envelope: {
                attack: 0.5,
                decay: 0.5,
                sustain: 0.8,
                release: 3
            }
        }).connect(this.effects.qReverb);
    }
    
    /**
     * Play a NoteSequence generated by the AI engine
     * @param {Object} sequence - Magenta NoteSequence to play
     * @param {Object} genreBlend - Current genre blend for audio parameters
     */
    playSequence(sequence, genreBlend = null) {
        if (!sequence || !sequence.notes || sequence.notes.length === 0) {
            console.warn('No valid sequence provided');
            return;
        }
        
        // Stop any current playback
        this.stop();
        
        // Apply genre-specific parameters
        if (genreBlend) {
            this._applyGenreParameters(genreBlend);
        }
        
        // Convert sequence to Tone.js events
        const events = sequence.notes.map(note => {
            return {
                time: note.startTime,
                note: Tone.Frequency(note.pitch, "midi").toNote(),
                velocity: note.velocity / 127, // Convert MIDI velocity (0-127) to range 0-1
                duration: note.endTime - note.startTime
            };
        });
        
        // Create a new part for playback
        this.currentPart = new Tone.Part((time, event) => {
            const velocity = event.velocity;
            const duration = event.duration;
            
            // Determine which synth to use based on the note's pitch
            const noteNum = Tone.Frequency(event.note).toMidi();
            
            if (noteNum < 50) {
                // Bass/kick notes
                this.synths.kick.triggerAttackRelease(event.note, duration, time, velocity);
            } else if (noteNum < 60) {
                // Snare/clap notes
                this.synths.snare.triggerAttackRelease(duration, time, velocity);
            } else if (noteNum < 70) {
                // Mid-range notes
                this.synths.lead.triggerAttackRelease(event.note, duration, time, velocity);
            } else {
                // Higher notes
                if (duration > 0.5) {
                    // Longer notes use pad synth
                    this.synths.pad.triggerAttackRelease(event.note, duration, time, velocity * 0.7);
                } else {
                    // Shorter notes use hi-hat or lead
                    if (noteNum % 12 === 0 || noteNum % 12 === 7) {
                        this.synths.hihat.triggerAttackRelease(event.note, duration, time, velocity * 0.5);
                    } else {
                        this.synths.lead.triggerAttackRelease(event.note, duration, time, velocity);
                    }
                }
            }
        }, events);
        
        // Start playback
        this.currentPart.start(0);
        this.isPlaying = true;
        
        // Set tempo based on sequence
        if (sequence.tempos && sequence.tempos.length > 0) {
            this.tempo = sequence.tempos[0].qpm;
            Tone.Transport.bpm.value = this.tempo;
        }
        
        // Start Tone.js transport if needed
        if (Tone.Transport.state !== "started") {
            Tone.Transport.start();
        }
    }
      /**
     * Apply genre-specific parameters to audio system
     * @param {Object} genreBlend - Blend of genres (trance, dubstep, dnb)
     */
    _applyGenreParameters(genreBlend) {
        // Get input values directly from InputSystem if available
        let alphaValue = 0.5; // Default
        let betaValue = 0.5;  // Default
        
        if (window.app && window.app.inputSystem) {
            alphaValue = window.app.inputSystem.getAlphaWaves();
            betaValue = window.app.inputSystem.getBetaWaves();
        }
        
        // Adjust tempo directly based on alpha value (mouse frequency)
        // Fast mouse movement = faster tempo
        let tempoBPM = 100 + (alphaValue * 80); // 100-180 BPM range
        
        // Apply genre modifications on top of the neural input
        tempoBPM += genreBlend.trance * 10; // Trance: slightly faster
        tempoBPM -= genreBlend.dubstep * 20; // Dubstep: slower
        tempoBPM += genreBlend.dnb * 20; // DnB: faster
        
        // Apply the tempo
        Tone.Transport.bpm.value = tempoBPM;
        this.tempo = tempoBPM;
        
        // Adjust filter cutoff frequency based on alpha value (mouse frequency)
        // Higher frequency (faster movement) = brighter sound (higher cutoff)
        const baseCutoff = 500 + (alphaValue * 2500); // 500Hz-3000Hz range
        
        // Apply genre modifications
        const filterFreq = baseCutoff + (genreBlend.dubstep * 500) - (genreBlend.dnb * 200);
        this.effects.filter.frequency.value = filterFreq;
        
        // Adjust delay time based on beta value (keyboard complexity)
        // More complex keyboard input = more intricate delay patterns
        const delayOptions = ["16n", "8n", "8n.", "4n"]; 
        const delayIndex = Math.min(3, Math.floor(betaValue * 4));
        const delayTime = delayOptions[delayIndex];
        this.effects.delay.delayTime.value = delayTime;
        
        // Adjust delay feedback based on beta value
        // More complex keyboard input = more feedback
        this.effects.delay.feedback.value = 0.2 + (betaValue * 0.3); // 0.2-0.5 range
        
        // Adjust reverb settings based on alpha
        // Lower frequency (slower movement) = more spacious reverb
        const reverbDecay = 1 + ((1 - alphaValue) * 4); // 1-5s range
        this.effects.reverb.decay = reverbDecay;
        
        // Apply quantum modulation based on input combination
        // Frequency based on alpha, depth based on beta
        const modulationFreq = 0.5 + (alphaValue * 4); // 0.5-4.5 Hz range
        const modulationDepth = 0.3 + (betaValue * 0.6); // 0.3-0.9 range
        
        this.effects.qModulation.frequency.value = modulationFreq;
        this.effects.qModulation.depth = modulationDepth;
        
        // Console log current audio parameters occasionally
        if (Math.random() < 0.01) { // 1% chance to log
            console.log(`Audio parameters - Tempo: ${tempoBPM.toFixed(1)} BPM, Filter: ${filterFreq.toFixed(0)} Hz, Reverb: ${reverbDecay.toFixed(1)}s`);
        }
    }
    
    /**
     * Trigger a single drum sound
     * @param {String} type - 'kick', 'snare', 'hihat', or 'clap'
     * @param {Number} velocity - Volume (0-1)
     */
    triggerDrum(type, velocity = 0.8) {
        if (type === 'kick') {
            this.synths.kick.triggerAttackRelease('C1', '8n', undefined, velocity);
        } else if (type === 'snare' || type === 'clap') {
            this.synths.snare.triggerAttackRelease('16n', undefined, velocity);
        } else if (type === 'hihat') {
            this.synths.hihat.triggerAttackRelease('32n', undefined, velocity * 0.6);
        }
    }
    
    /**
     * Play drum pattern from quantum rhythm
     * @param {Object} rhythmPattern - Object with kick, snare, hihat, clap booleans
     */
    playRhythmPattern(rhythmPattern) {
        if (rhythmPattern.kick) {
            this.triggerDrum('kick', 0.8);
        }
        
        // Delay snare slightly
        if (rhythmPattern.snare) {
            setTimeout(() => this.triggerDrum('snare', 0.7), 150);
        }
        
        // Delay hi-hat even more
        if (rhythmPattern.hihat) {
            setTimeout(() => this.triggerDrum('hihat', 0.5), 250);
        }
        
        // Delay clap the most
        if (rhythmPattern.clap) {
            setTimeout(() => this.triggerDrum('snare', 0.9), 350);
        }
    }
    
    /**
     * Stop all playback
     */
    stop() {
        if (this.currentPart) {
            this.currentPart.stop();
            this.currentPart.dispose();
            this.currentPart = null;
        }
        
        this.isPlaying = false;
    }
    
    /**
     * Set master volume
     * @param {Number} level - Volume level (0-1)
     */
    setVolume(level) {
        Tone.Destination.volume.value = Tone.gainToDb(level);
    }
}

// Export the class for use in other modules
window.AudioSystem = AudioSystem;